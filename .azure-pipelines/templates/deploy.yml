parameters:
  - name: serverHost
    type: string
  - name: serverUser
    type: string
  - name: jarName
    type: string
  - name: appPort
    type: string
    default: '8080'
  - name: appName
    type: string
    default: 'demo'

jobs:
  - job: Deploy
    displayName: 'Deploy to Home Server'
    steps:
      # Download the artifact
      - script: |
          mkdir -p $(Build.ArtifactStagingDirectory)
          cp app/target/${{ parameters.jarName }} $(Build.ArtifactStagingDirectory)/
        displayName: 'Download Artifact'

      # Backup current deployment
      - script: |
          ssh ${{ parameters.serverUser }}@${{ parameters.serverHost }} '
            if [ -f /opt/${{ parameters.appName }}/${{ parameters.jarName }} ]; then
              echo "Backing up current deployment..."
              cp /opt/${{ parameters.appName }}/${{ parameters.jarName }} /opt/${{ parameters.appName }}/backup/${{ parameters.jarName }}.$(date +%Y%m%d-%H%M%S)
            fi
          '
        displayName: 'Backup Current Deployment'
        continueOnError: 'true'

      # Deploy the new version
      - script: |
          # Create app directory if it doesn't exist
          ssh ${{ parameters.serverUser }}@${{ parameters.serverHost }} '
            mkdir -p /opt/${{ parameters.appName }}/backup
          '
          
          # Copy the new JAR
          scp $(Build.ArtifactStagingDirectory)/${{ parameters.jarName }} ${{ parameters.serverUser }}@${{ parameters.serverHost }}:/opt/${{ parameters.appName }}/
          
          # Stop current process, start new one
          ssh ${{ parameters.serverUser }}@${{ parameters.serverHost }} '
            # Find and stop the current Java process
            pid=$(pgrep -f "${{ parameters.appName }}")
            if [ ! -z "$pid" ]; then
              echo "Stopping current process $pid"
              kill $pid
              sleep 5
            fi
            
            # Start the new version
            echo "Starting new version..."
            cd /opt/${{ parameters.appName }}
            nohup java -jar ${{ parameters.jarName }} --server.port=${{ parameters.appPort }} > app.log 2>&1 &
          '
        displayName: 'Deploy and Restart Application'

      # Health check
      - script: |
          echo "Waiting for application to start..."
          sleep 30
          for i in {1..5}; do
            if curl -f http://${{ parameters.serverHost }}:${{ parameters.appPort }}/actuator/health; then
              echo "Application is healthy!"
              exit 0
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1
        displayName: 'Health Check' 