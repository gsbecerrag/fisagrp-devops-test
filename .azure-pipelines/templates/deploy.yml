parameters:
  - name: serverHost
    type: string
  - name: serverUser
    type: string
  - name: dockerImage
    type: string
  - name: appPort
    type: string
    default: '8080'
  - name: appName
    type: string
    default: 'demo'

jobs:
  - job: Deploy
    displayName: 'Deploy to Home Server'
    steps:
      # Backup current deployment
      - script: |
          ssh ${{ parameters.serverUser }}@${{ parameters.serverHost }} '
            # Get current container ID if running
            current_container=$(docker ps -q --filter name=${{ parameters.appName }})
            if [ ! -z "$current_container" ]; then
              echo "Backing up current deployment..."
              docker commit $current_container ${{ parameters.appName }}:backup-$(date +%Y%m%d-%H%M%S)
            fi
          '
        displayName: 'Backup Current Deployment'
        continueOnError: 'true'

      # Deploy the new version
      - script: |
          ssh ${{ parameters.serverUser }}@${{ parameters.serverHost }} '
            # Pull the new image
            echo "Pulling new image..."
            docker pull ${{ parameters.dockerImage }}
            
            # Stop and remove current container if running
            current_container=$(docker ps -q --filter name=${{ parameters.appName }})
            if [ ! -z "$current_container" ]; then
              echo "Stopping current container..."
              docker stop $current_container
              docker rm $current_container
            fi
            
            # Start new container
            echo "Starting new container..."
            docker run -d \
              --name ${{ parameters.appName }} \
              -p ${{ parameters.appPort }}:8080 \
              --restart unless-stopped \
              ${{ parameters.dockerImage }}
          '
        displayName: 'Deploy and Restart Container'

      # Health check
      - script: |
          echo "Waiting for application to start..."
          sleep 30
          for i in {1..5}; do
            if curl -f http://${{ parameters.serverHost }}:${{ parameters.appPort }}/actuator/health; then
              echo "Application is healthy!"
              exit 0
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1
        displayName: 'Health Check' 